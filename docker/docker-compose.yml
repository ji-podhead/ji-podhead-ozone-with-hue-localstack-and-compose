networks:
  network1:
    driver: bridge
    ipam:
      config:
        - subnet: 200.0.0.0/16
          gateway: 200.0.0.1
volumes:
  postgres:
  data:
services:
  admin:
    image: adminer
    privileged: true
    restart: always
    depends_on: 
      - postgresql
    ports:
      - 8080:8080
# ---------- >> POSTGRES << ----------
  cloudera:
      image: gethue/hue:latest
      hostname: hue
      container_name: hue
      #dns: 8.8.8.8
      privileged: true
      ports:
      - "8888:8888"
      environment:
        POSTGRES_DB: hue
        POSTGRES_USER: hue
        POSTGRES_HOST: postgresql # <-- Korrekter Service-Name als Hostname
        POSTGRES_PASSWORD: hue
        DJANGO_ALLOWED_HOSTS: '*' # <-- Wahrscheinlich benötigt, einkommentieren
        IS_YARN_ENABLED: false    # <-- Diese hattest du vorher, ggf. wieder hinzufügen?

      volumes:
        - ./hue.ini:/usr/share/hue/desktop/conf/z-hue.ini
      depends_on:
      - "postgresql"
  postgresql:
    image: postgres
    restart: always
    hostname: postgres # adminer requires a host name
    privileged: true
    # set shared memory limit when using docker-compose
    shm_size: 128mb
    # or set shared memory limit when deploy via swarm stack
    #volumes:
    #  - type: tmpfs
    #    target: /dev/shm
    #    tmpfs:
    #      size: 134217728 # 128*2^20 bytes = 128Mb
    environment:
      POSTGRES_PASSWORD:  hue
      POSTGRES_DB: hue
      POSTGRES_USER: hue
      restart: unless-stopped
      POSTGRES_HOST_AUTH_METHOD: trust
    # volumes:
    #   - postgres:/data/postgres
    ports:
      - "5432:5432"
    # networks:
    #   network1:
    #     ipv4_address: 200.0.0.4
  # database:
  #     image: mysql:5.7
  #     ports:
  #         - "33061:3306"
  #     command: --init-file /data/application/init.sql
  #     volumes:
  #         - data:/var/lib/mysql
  #         - ./init.sql:/data/application/init.sql
  #     environment:
  #         MYSQL_ROOT_USER: root
  #         MYSQL_ROOT_PASSWORD: secret
  #         MYSQL_DATABASE: hue
  #         MYSQL_USER: root
  #         MYSQL_PASSWORD: secret

# ---------- >> HUE (NEW) << ----------
  # cloudera:
  #     image: gethue/hue:latest
  #     hostname: hue
  #     container_name: hue
  #     dns: 8.8.8.8
  #     ports:
  #     - "8888:8888"
  #     volumes:
  #       - ./hue.ini:/usr/share/hue/desktop/conf/z-hue.ini
  #     depends_on:
  #     - "postgresql"
  #     environment:
  #     - POSTGRES_DB test
  #     - POSTGRES_USER test
  #     - POSTGRES_PASSWORD test
  #     - DJANGO_ALLOWED_HOSTS=*

 # Hue should only start when OM and S3G are ready
    #   - om
    #   - s3g
#   # ---------- >> ADMINER << ----------
#   adminer: # This seems like the intended adminer service due to the network config
#     image: adminer
#     restart: always
#     ports:
#       - 8080:8080 # Note: Port 8080 is exposed twice (here and above). This might cause conflicts unless one is removed.
#     networks:
#       network1:
#         ipv4_address: 200.0.0.12
# # ---------- >> OZONE << ----------
#   datanode:
#     image: apache/ozone:latest
#     ports:
#         - 9864
#     command: ["ozone","datanode"]
#     env_file:
#         - ./ozone/ozone.env
#   om:
#     image: apache/ozone:latest
#     ports:
#         - 9874:9874
#     environment:
#         ENSURE_OM_INITIALIZED: /data/metadata/om/current/VERSION
#         WAITFOR: scm:9876
#     env_file:
#         - ./ozone/ozone.env
#     command: ["ozone","om"]
#   scm:
#     image: apache/ozone:latest
#     ports:
#         - 9876:9876
#     env_file:
#         - ./ozone/ozone.env
#     environment:
#         ENSURE_SCM_INITIALIZED: /data/metadata/scm/current/VERSION
#     command: ["ozone","scm"]
#   recon:
#     image: apache/ozone:latest
#     ports:
#         - 9888:9888
#     env_file:
#         - ./ozone/ozone.env
#     command: ["ozone","recon"]
#   s3g:
#     image: apache/ozone:latest
#     ports:
#         - 9878:9878
#         - 8088:8088
#     env_file:
#         - ./ozone/ozone.env
#     command: ["ozone","s3g"]

#   localstack:
#     image: localstack/localstack:latest
#     container_name: localstack_demo
#     ports:
#       - '4563-4599:4563-4599'
#       - '8055:8080' # Note: Port 8080 on the host is potentially used by Adminer as well. Consider changing one.
#     environment:
#       - SERVICES=s3
#       - DEBUG=1
#       - DATA_DIR=/tmp/localstack/data
#     volumes:
#       - './.localstack:/tmp/localstack'
#       - '/var/run/docker.sock:/var/run/docker.sock'

# ---------- >> EXPORTERS << ----------
  # postgresql-exporter:
  #     image: prometheuscommunity/postgres-exporter
  #     container_name: postgresql-exporter
  #     privileged: true
  #     ports:
  #         - "9187:9187"
  #     environment:
  #         DATA_SOURCE_NAME: "postgres://${DB_USERNAME}:${DB_PASSWORD}@${DB_HOST}/${DB_NAME}?sslmode=disable"
  #     depends_on:
  #         prometheus:
  #             condition: service_started
  #         postgresql:
  #             condition: service_healthy
  #     restart: unless-stopped
  #     networks:
  #         - network1
